AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  RdsHostParam:
    Type: Aws::SSM::Parameter::Value<String>
    Default: RDS_DB_HOST
  RdsUserParam:
    Type: Aws::SSM::Parameter::Value<String>
    Default: RDS_DB_USER
  RdsPassParam:
    Type: Aws::SSM::Parameter::Value<String>
    Default: RDS_DB_PASS

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  HelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-HelloWorld'
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
          AWS_DB_HOST: '{{resolve:ssm:RDS_DB_HOST:1}}'
          AWS_DB_USER: '{{resolve:ssm:RDS_DB_USER:1}}'
          AWS_DB_PASSWORD: '{{resolve:ssm:RDS_DB_PASS:1}}'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        SignUpEvent:
          Type: Api
          Properties:
            Path: /api/auth/signup
            Method: post
            Cors:
              AllowMethods: "'POST'"
              AllowOrigin: "'*'"
              AllowHeaders: "'x-access-token'"
        SignInEvent:
          Type: Api
          Properties:
            Path: /api/auth/signin
            Method: post
            Cors:
              AllowMethods: "'OPTIONS,POST'"
              AllowOrigin: "'*'"
              AllowHeaders: "'x-access-token'"
        FileCreateEvent:
          Type: Api
          Properties:
            Path: /api/file/create
            Method: post
            Cors:
              AllowMethods: "'OPTIONS,POST'"
              AllowOrigin: "'*'"
              AllowHeaders: "'x-access-token'"
        FileUpdateEvent:
          Type: Api
          Properties:
            Path: /api/file/update/{id}
            Method: post
            Cors:
              AllowMethods: "'OPTIONS,POST'"
              AllowOrigin: "'*'"
              AllowHeaders: "'x-access-token'"
        FileDeleteEvent:
          Type: Api
          Properties:
            Path: /api/file/{id}
            Method: delete
            Cors:
              AllowMethods: "'OPTIONS,DELETE'"
              AllowOrigin: "'*'"
              AllowHeaders: "'x-access-token'"
        FileListEvent:
          Type: Api
          Properties:
            Path: /api/file/list
            Method: get
            Cors:
              AllowMethods: "'OPTIONS,GET'"
              AllowOrigin: "'*'"
              AllowHeaders: "'x-access-token'"
        FileListAdminEvent:
          Type: Api
          Properties:
            Path: /api/file/admin/list
            Method: get
            Cors:
              AllowMethods: "'OPTIONS,GET'"
              AllowOrigin: "'*'"
              AllowHeaders: "'x-access-token'"
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMReadOnlyAccess'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
